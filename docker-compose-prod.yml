services:
  nginx-proxy:
    image: jwilder/nginx-proxy
    container_name: nginx-proxy
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ./certs:/etc/nginx/certs
      - ./vhost.d:/etc/nginx/vhost.d
      - ./html:/usr/share/nginx/html
      - /etc/letsencrypt:/etc/letsencrypt
      - ./nginx/custom:/etc/nginx/conf.d:ro
    networks:
      - web

  acme-companion:
    image: nginxproxy/acme-companion
    container_name: acme-companion
    restart: always
    depends_on:
      - nginx-proxy
    env_file:
      - .env.production
    environment:
    - NGINX_PROXY_CONTAINER=${NGINX_PROXY_CONTAINER}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./certs:/etc/nginx/certs
      - ./vhost.d:/etc/nginx/vhost.d
      - ./html:/usr/share/nginx/html
      - /etc/letsencrypt:/etc/letsencrypt
    networks:
      - web

  backend:
    build: .
    container_name: backend
    command: sh -c "python manage.py prepare_app && gunicorn core.wsgi:application --bind 0.0.0.0:8000"
    volumes:
      - ./core:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    expose:
      - "8000"
    restart: always
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    env_file:
      - .env.production
    environment:
      - VIRTUAL_HOST=${VIRTUAL_HOST}
      - LETSENCRYPT_HOST=${LETSENCRYPT_HOST}
      - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL}
    networks:
      - web
    healthcheck:
      test: ["CMD", "curl", "--fail", "--silent", "--output", "/dev/null", "http://127.0.0.1:8000"]
      start_period: 60s
      interval: 60s
      timeout: 10s
      retries: 5

  postgres:
    image: postgres:latest
    container_name: postgres
    restart: always
    env_file:
      - .env.production
    volumes:
      - postgres_data:/var/lib/postgresql/data
    expose:
      - "5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - web

  redis:
    container_name: redis
    image: redis
    restart: always
    expose:
      - "6379"
    command: redis-server --save 60 1 --loglevel warning
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - web

  celery_worker:
    build: .
    image: celery_worker
    command: celery -A core worker -l INFO
    restart: always
    depends_on:
      backend:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./core:/app
    env_file:
      - .env.production
    networks:
      - web

  celery_beat:
    build: .
    image: celery_beat
    command: celery -A core beat -l info
    restart: always
    depends_on:
      backend:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./core:/app
    env_file:
      - .env.production
    networks:
      - web

volumes:
  static_volume:
  media_volume:
  postgres_data:

networks:
  web:
    driver: bridge
